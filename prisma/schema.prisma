generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model definitions

model user {
  id                String            @id @default(uuid())
  name              String
  email             String            @unique
  phone             String
  password_hash     String
  cpf               String
  role              user_role
  user_type         user_type
  subscription_plan subscription_plan
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt

  // Relations
  companies        company[]
  projects_created project[]      @relation("ProjectCreatedBy")
  project_users    project_user[]
}

model company {
  id               String   @id @default(uuid())
  user_id          String
  company_name     String
  cnpj             String
  position_company String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  user        user         @relation(fields: [user_id], references: [id])
  projects    project[]
  invitations invitation[]
}

model project {
  id                 String         @id @default(uuid())
  name               String
  description        String
  responsible        String
  engineer           String?
  crea_number        String?
  start_date         DateTime
  expected_end_date  DateTime
  status             project_status
  address            String
  estimated_budget   Float?
  client             String
  company_id         String?
  created_by_user_id String
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt

  // Relations
  company           company?           @relation(fields: [company_id], references: [id])
  created_by        user               @relation("ProjectCreatedBy", fields: [created_by_user_id], references: [id])
  project_users     project_user[]
  construction_logs construction_log[]
  equipment         equipment[]
  invitations       invitation[]       @relation("ProjectInvitation")
}

model project_user {
  id         String    @id @default(uuid())
  project_id String
  user_id    String
  role       user_role
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  project project @relation(fields: [project_id], references: [id])
  user    user    @relation(fields: [user_id], references: [id])
}

model invitation {
  id         String            @id @default(uuid())
  email      String
  company_id String?
  project_id String?
  role       user_role
  token      String
  status     invitation_status
  created_at DateTime          @default(now())
  expires_at DateTime

  // Relations
  company company? @relation(fields: [company_id], references: [id])
  project project? @relation("ProjectInvitation", fields: [project_id], references: [id])
}

model construction_log {
  id         String   @id @default(uuid())
  date       DateTime
  project_id String
  tasks      String
  comments   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  project     project                     @relation(fields: [project_id], references: [id])
  weathers    weather[]
  occurrences occurrence[]
  services    service[]
  attachments attachment[]
  employees   construction_log_employee[]
}

model weather {
  id                  String           @id @default(cuid())
  period              Period
  climate             Climate
  condition           Condition
  construction_log_id String
  construction_log    construction_log @relation(fields: [construction_log_id], references: [id])
}

model occurrence {
  id                  String   @id @default(uuid())
  construction_log_id String
  type                String
  description         String
  employee_id         String
  created_at          DateTime @default(now())

  // Relations
  construction_log     construction_log      @relation(fields: [construction_log_id], references: [id])
  employee             employee              @relation(fields: [employee_id], references: [id])
  occurrence_employees occurrence_employee[]
}

model service {
  id                  String   @id @default(uuid())
  description         String
  value               Float
  construction_log_id String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relations
  construction_log construction_log @relation(fields: [construction_log_id], references: [id])
}

model employee {
  id         String          @id @default(uuid())
  name       String
  phone      String
  cpf        String
  pix_key    String
  role       String
  daily_rate Float
  status     employee_status
  user_id    String?
  company_id String?
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt

  // Relations
  occurrences                occurrence[]
  construction_log_employees construction_log_employee[]
  occurrence_employees       occurrence_employee[]
}

model equipment {
  id         String   @id @default(uuid())
  name       String
  quantity   Int
  project_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  project project @relation(fields: [project_id], references: [id])
}

model attachment {
  id                  String          @id @default(uuid())
  construction_log_id String
  url                 String
  type                attachment_type
  created_at          DateTime        @default(now())

  // Relations
  construction_log construction_log @relation(fields: [construction_log_id], references: [id])
}

model construction_log_employee {
  id                  String   @id @default(uuid())
  construction_log_id String
  employee_id         String
  tasks               String
  hours_worked        Float
  created_at          DateTime @default(now())

  // Relations
  construction_log construction_log @relation(fields: [construction_log_id], references: [id])
  employee         employee         @relation(fields: [employee_id], references: [id])
}

model occurrence_employee {
  id            String   @id @default(uuid())
  occurrence_id String
  employee_id   String
  role          String
  created_at    DateTime @default(now())

  // Relations
  occurrence occurrence @relation(fields: [occurrence_id], references: [id])
  employee   employee   @relation(fields: [employee_id], references: [id])
}

// Enum definitions
enum user_role {
  admin
  team
  client
}

enum user_type {
  person
  business
}

enum subscription_plan {
  free
  basic
  premium
  premium_plus
}

enum invitation_status {
  pending
  accepted
  declined
}

enum attachment_type {
  photo
  document
}

enum project_status {
  nao_iniciado
  iniciando
  em_andamento
  concluido
  cancelado
  em_espera
}

enum employee_status {
  ativo
  inativo
}

enum Period {
  manha
  tarde
  noite
}

enum Climate {
  ensolarado
  nublado
  chuvoso
  tempestade
}

enum Condition {
  praticavel
  impraticavel
}
