generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model definitions

model user {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String
  password_hash String
  cpf           String    @unique
  user_type     user_type
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  //Relations
  company_user        company_user[]
  ownedcompany        company[]      @relation("CompanyOwner")
  associatedCompanies company[]      @relation("CompanyUser")
}

model company {
  id                String            @id @default(uuid())
  company_name      String
  cnpj              String?           @unique
  position_company  String?
  subscription_plan subscription_plan
  owner_id          String
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt

  // Relations
  owner         user           @relation("CompanyOwner", fields: [owner_id], references: [id])
  company_users company_user[]
  projects      project[]
  invitations   invitation[]
  equipment     equipment[]
  employees     employee[]
  user          user?          @relation("CompanyUser", fields: [userId], references: [id])
  userId        String?
}

model company_user {
  id         String    @id @default(uuid())
  user_id    String
  company_id String
  role       user_role
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  user    user    @relation(fields: [user_id], references: [id])
  company company @relation(fields: [company_id], references: [id])
}

model project {
  id                String         @id @default(uuid())
  name              String
  description       String
  responsible       String
  engineer          String?
  crea_number       String?
  start_date        DateTime
  expected_end_date DateTime
  status            project_status
  address           String
  estimated_budget  Float?
  client            String
  company_id        String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt

  // Relations
  company           company            @relation(fields: [company_id], references: [id])
  construction_logs construction_log[]
  equipment_usages  equipment_usage[]
  invitations       invitation[]       @relation("ProjectInvitation")
}

model invitation {
  id         String            @id @default(uuid())
  email      String
  company_id String?
  project_id String?
  role       user_role
  token      String
  status     invitation_status
  created_at DateTime          @default(now())
  expires_at DateTime

  // Relations
  company company? @relation(fields: [company_id], references: [id])
  project project? @relation("ProjectInvitation", fields: [project_id], references: [id])
}

model construction_log {
  id         String   @id @default(uuid())
  date       DateTime
  project_id String
  tasks      String?
  comments   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  project         project                     @relation(fields: [project_id], references: [id])
  weathers        weather[]
  occurrences     occurrence[]
  services        service[]
  attachments     attachment[]
  employees       construction_log_employee[]
  equipment_usage equipment_usage[]
}

model weather {
  id                  String           @id @default(cuid())
  period              Period
  climate             Climate
  condition           Condition
  construction_log_id String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  construction_log    construction_log @relation(fields: [construction_log_id], references: [id])
}

model occurrence {
  id                  String   @id @default(uuid())
  construction_log_id String
  type                String
  description         String
  employee_id         String?
  created_at          DateTime @default(now())

  // Relations
  construction_log construction_log @relation(fields: [construction_log_id], references: [id])
  employee         employee?        @relation(fields: [employee_id], references: [id])
}

model service {
  id                  String   @id @default(uuid())
  name                String
  description         String
  value               Float
  construction_log_id String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relations
  construction_log construction_log @relation(fields: [construction_log_id], references: [id])
}

model employee {
  id         String          @id @default(uuid())
  name       String
  phone      String
  cpf        String
  pix_key    String
  role       String
  daily_rate Float
  status     employee_status
  company_id String
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt

  // Relations
  occurrences                occurrence[]
  construction_log_employees construction_log_employee[]
  company                    company                     @relation(fields: [company_id], references: [id])
}

model equipment {
  id         String   @id @default(uuid())
  name       String
  company_id String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  // Relations
  owner_company    company?          @relation(fields: [company_id], references: [id])
  equipment_usages equipment_usage[]
}

model equipment_usage {
  id                  String   @id @default(uuid())
  construction_log_id String
  equipment_id        String
  quantity            Int
  created_at          DateTime @default(now())

  // Relations
  construction_log construction_log @relation(fields: [construction_log_id], references: [id])
  equipment        equipment        @relation(fields: [equipment_id], references: [id])
  project          project?         @relation(fields: [projectId], references: [id])
  projectId        String?
}

model attachment {
  id                  String          @id @default(uuid())
  construction_log_id String
  url                 String
  type                attachment_type
  created_at          DateTime        @default(now())

  // Relations
  construction_log construction_log @relation(fields: [construction_log_id], references: [id])
}

model construction_log_employee {
  id                  String   @id @default(uuid())
  construction_log_id String
  employee_id         String
  role                String
  hours_worked        Float
  comments            String?
  created_at          DateTime @default(now())

  // Relations
  construction_log construction_log @relation(fields: [construction_log_id], references: [id])
  employee         employee         @relation(fields: [employee_id], references: [id])
}

// Enum definitions
enum user_role {
  admin
  team
  client
}

enum user_type {
  person
  business
}

enum subscription_plan {
  free
  basic
  premium
  premium_plus
}

enum invitation_status {
  pending
  accepted
  declined
}

enum attachment_type {
  photo
  document
}

enum project_status {
  nao_iniciado
  iniciando
  em_andamento
  concluido
  cancelado
  em_espera
}

enum employee_status {
  ativo
  inativo
}

enum Period {
  manha
  tarde
  noite
}

enum Climate {
  ceu_limpo
  nublado
  chuvoso
}

enum Condition {
  praticavel
  impraticavel
}
